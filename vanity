#!/usr/bin/env php
<?php
$tstart = time();
error_reporting(-1);

include_once 'helpers/cachecore/icachecore.interface.php';
include_once 'helpers/cachecore/cachecore.class.php';
include_once 'helpers/cachecore/cachefile.class.php';
include_once 'helpers/vanity.class.php';
include_once 'helpers/linkmap.class.php';
include_once 'helpers/lexer.class.php';
include_once 'helpers/phpt.class.php';
include_once 'helpers/example.class.php';
include_once 'helpers/examplify.class.php';
include_once 'helpers/generator.class.php';
include_once 'helpers/markdown.php';
include_once 'helpers/spyc.php';

$tree = array();
$search_index = new stdClass();
$search_index->index = new stdClass();
$search_index->index->searchIndex = array();
$search_index->index->longSearchIndex = array();
$search_index->index->info = array();


/********************************************************/
// GENERATE HELP

$help = array(
	'match:' => '(Required) The file pattern to recursively match (e.g. *.class.php).',
	'title:' => '(Required) The title to use for the README page.',
	'readme:' => '(Optional) The location of the file to use for the body of the README. Will be parsed with Markdown. Uses built-in default README if not set.',
	'output:' => '(Optional) The location to output the raw XML lexer output. Defaults to `output`.',
	'template:' => '(Optional) The location of the directory that contains your `template_definition.php` file. Defaults to `template`.',
	// 'skip-lexer' => '(Optional) Skips the lexer & reflection engine. Assumes that the XML output is already available to generate docs from.'
);

$options = getopt('', array_keys($help));

if (sizeof($options) === 0)
{
	echo PHP_EOL;
	echo 'Vanity ' . Vanity::VERSION . PHP_EOL;
	echo "    Uses PHP's Reflection API to generate source reference documentation." . PHP_EOL;
	echo PHP_EOL;

	ksort($help);

	foreach ($help as $k => $v)
	{
		echo '--' . preg_replace('/(:*)/', '', $k) . PHP_EOL;
		echo '    ' . $v . PHP_EOL;
	}

	echo "\n\n";

	die();
}

echo PHP_EOL;


/********************************************************/
// FAIL IF WE'RE MISSING REQUIRED PARAMETERS

if (!isset($options['match'])) die('The --match parameter is required.' . PHP_EOL);
if (!isset($options['title'])) die('The --title parameter is required.' . PHP_EOL);


/********************************************************/
// WORKING DIRECTORIES

echo "WORKING DIRECTORIES" . PHP_EOL;

// Output
if (!isset($options['output']) || !$options['output']) { $output = './output'; }
else { $output = $options['output']; }
if (realpath($output) == '') { shell_exec('mkdir -p ' . $output); }
$output = realpath($output);
echo '    Output: ' . $output . PHP_EOL;

// Template
if (!isset($options['template']) || !$options['template']) { $template = dirname(__FILE__) . '/template'; }
else { $template = $options['template']; }
echo '    Template: ' . realpath($template) . PHP_EOL;

// Cache
$cache_dir = dirname(__FILE__) . '/cache';

// README
if (!isset($options['readme']) || !$options['readme']) { $readme = realpath($template . '/partials/README.phtml'); }
else { $readme = realpath($options['readme']); }
echo '    README: ' . $readme . PHP_EOL;

define('OUTPUT_DIR', $output . DIRECTORY_SEPARATOR);
define('HTML_DIR', OUTPUT_DIR . 'html' . DIRECTORY_SEPARATOR);
define('CACHE_DIR', $cache_dir . '/');

echo PHP_EOL;


/********************************************************/
// DETERMINE CLASSES TO REFLECT

// Get the initial set of defined classes
$before = get_declared_classes();

// Glob and load
$files = Util::rglob($options['match']);
echo "FILE MATCHES" . PHP_EOL;
foreach ($files as $file)
{
	$file = getcwd() . '/' . $file;
	echo '    ' . $file . PHP_EOL;
	include_once $file;
}
echo PHP_EOL;

// Get the updated list of defined classes
$after = get_declared_classes();

// These are the new classes that were introduced
$diff = array_diff($after, $before);

// Do more filtering of the list
$parse_me = array();
echo "CLASS MATCHES" . PHP_EOL;
foreach ($diff as $class)
{
	// Exclude classes that contain the word "Exception"
	if (stripos($class, 'Exception') === false)
	{
		$parse_me[] = $class;
		echo '    ' . $class . PHP_EOL;
	}
}
natsort($parse_me);
echo PHP_EOL;


/********************************************************/
// REMOVING OLD OUTPUT DIRECTORY

echo "REMOVING OLD OUTPUT DIRECTORY" . PHP_EOL;
if (OUTPUT_DIR == '/') die('Current working directory doesn\'t exist. Stopping.');
$cmd = 'rm -Rf ' . OUTPUT_DIR;
echo '    ' . $cmd . PHP_EOL;
shell_exec($cmd);
echo PHP_EOL;


/********************************************************/
// GENERATING THE LINKMAP

echo "GENERATING THE LINKMAP" . PHP_EOL;
$lmap = new LinkMap();
foreach ($parse_me as $class)
{
	$lmap->add_class($class);
}
$linkmap = $lmap->generate_map();
echo '    Done.' . PHP_EOL;
echo PHP_EOL;


/********************************************************/
// RUN THE LEXER

echo "RUNNING THE LEXER" . PHP_EOL;
$lexer = new Lexer($linkmap);
foreach ($parse_me as $class)
{
	$lexer->parse_class($class, $output);
}
echo PHP_EOL;


/********************************************************/
// READ AND APPLY THE TEMPLATES

include $template . DIRECTORY_SEPARATOR . 'template_definition.php';

echo "GENERATING THE FRAME & README" . PHP_EOL;
$tmpl = new Template($class, OUTPUT_DIR, $template, $options['title'], (isset($options['readme']) ? $options['readme'] : null));
echo $tmpl->frame();
echo $tmpl->readme($parse_me);
echo $tmpl->info_document('Apache 2.0 License', 'LICENSE');
echo $tmpl->info_document('Third-Party License and Copyright Notices', 'NOTICE');
echo PHP_EOL;

echo "RUNNING THE GENERATOR" . PHP_EOL;
$core_utilities = array('Core Utilities', '#', '', array());

foreach ($parse_me as $class)
{
	$tmpl = new Template($class, OUTPUT_DIR, $template, $options['title']);
	$tmpl->class_init();

	if (stripos($class, 'Amazon') === 0)
	{
		$tree[] = $tmpl->build_tree();
	}
	elseif (stripos($class, 'CF') === 0 || stripos($class, 'Cache') === 0)
	{
		$core_utilities[3][] = $tmpl->build_tree();
	}

	$search_index = $tmpl->build_search_index($search_index);

	foreach ($tmpl->write_to as $w)
	{
		echo '    ' . $w . PHP_EOL;
	}
}

// Append the Core Utilities
$tree[] = $core_utilities;

echo PHP_EOL;


/********************************************************/
// COPY BACK

echo "COPYING STATIC FILES TO OUTPUT DIRECTORY" . PHP_EOL;
foreach (CopyFiles::get_files() as $file)
{
	$cmd = 'cp -Rf ' . realpath($template) . DIRECTORY_SEPARATOR . $file . ' ' . HTML_DIR;
	echo '    ' . $cmd . PHP_EOL;
	shell_exec($cmd);
}

// XML
$cmd = 'cp -Rf ' . OUTPUT_DIR . 'xml' . DIRECTORY_SEPARATOR . ' ' . HTML_DIR . 'xml' . DIRECTORY_SEPARATOR;
echo '    ' . $cmd . PHP_EOL;
shell_exec($cmd);

// JSON
$cmd = 'cp -Rf ' . OUTPUT_DIR . 'json' . DIRECTORY_SEPARATOR . ' ' . HTML_DIR . 'json' . DIRECTORY_SEPARATOR;
echo '    ' . $cmd . PHP_EOL;
shell_exec($cmd);

echo PHP_EOL;


/********************************************************/
// COPY PANEL JS FILES

echo "PANEL SEARCH/TREE" . PHP_EOL;

	// Add additional entries.
	$tree[] = array('LICENSE', '#d=LICENSE.html', '', array());
	$tree[] = array('NOTICE', '#d=NOTICE.html', '', array());
	$tree[] = array('README', '#d=README.html', '', array());

	$generator = new Generator(null, OUTPUT_DIR);

	// tree
	$generator->start();
	echo 'var tree = ' . json_encode($tree);
	$generator->end($generator->output_dir . '/html/panel/tree.js');

	$generator->start();
	echo 'var search_data = ' . json_encode($search_index);
	$generator->end($generator->output_dir . 'html/panel/search_index.js');

	echo '    ' . $generator->output_dir . 'html/panel/tree.js' . PHP_EOL;
	echo '    ' . $generator->output_dir . 'html/panel/search_index.js' . PHP_EOL;

echo PHP_EOL;


/********************************************************/
// GENERATE OFFLINE DOCS

$clean_title = strtolower(str_replace(array('(',')','|','/','\\'), '', str_replace(' ', '_', $options['title'])));

echo "GENERATE OFFLINE DOCS" . PHP_EOL;
$cmd = 'cd ' . OUTPUT_DIR . ' && ' . PHP_EOL;
$cmd .= 'cp -Rf ' . HTML_DIR . ' ' . OUTPUT_DIR . $clean_title . DIRECTORY_SEPARATOR . ' && ' . PHP_EOL;

// zip
$cmd .= 'zip -r latest_docs .' . DIRECTORY_SEPARATOR . $clean_title . DIRECTORY_SEPARATOR . PHP_EOL;
$cmd .= 'mv latest_docs.zip ' . HTML_DIR . ' && ' . PHP_EOL;

// gzip
$cmd .= 'tar -cf latest_docs.tar .' . DIRECTORY_SEPARATOR . $clean_title . DIRECTORY_SEPARATOR . '* && gzip -9 latest_docs.tar && ' . PHP_EOL;
$cmd .= 'mv latest_docs.tar.gz ' . HTML_DIR . ' && ' . PHP_EOL;

// bzip2
$cmd .= 'tar -cf latest_docs.tar .' . DIRECTORY_SEPARATOR . $clean_title . DIRECTORY_SEPARATOR . '* && bzip2 -9 latest_docs.tar && ' . PHP_EOL;
$cmd .= 'mv latest_docs.tar.bz2 ' . HTML_DIR . ' && ' . PHP_EOL;

$cmd .= 'rm -Rf ' . OUTPUT_DIR . $clean_title . DIRECTORY_SEPARATOR . PHP_EOL;
shell_exec($cmd);

// zip
$doc_path = HTML_DIR . 'latest_docs.zip';
echo '    ' . $doc_path . ' (' . Util::size_readable(filesize($doc_path)) . ')' . PHP_EOL;

// gzip
$doc_path = HTML_DIR . 'latest_docs.tar.gz';
echo '    ' . $doc_path . ' (' . Util::size_readable(filesize($doc_path)) . ')' . PHP_EOL;

// bzip2
$doc_path = HTML_DIR . 'latest_docs.tar.bz2';
echo '    ' . $doc_path . ' (' . Util::size_readable(filesize($doc_path)) . ')' . PHP_EOL;

echo PHP_EOL;


/********************************************************/

$tend = time();
echo 'DONE. (' . ($tend - $tstart) . ' seconds)' . PHP_EOL;
echo PHP_EOL;
