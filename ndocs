#!/usr/bin/env php
<?php
$tstart = time();
error_reporting(-1);

include_once 'helpers/lexer.class.php';
include_once 'helpers/generator.class.php';

$tree = array();


/********************************************************/
// GENERATE HELP

$help = array(
	'match:' => '(Required) The file pattern to recursively match (e.g. *.class.php).',
	'output:' => '(Optional) The location to output the raw XML lexer output. Defaults to `output`.',
	'template:' => '(Optional) The location of the directory that contains your `template_definition.php` file. Defaults to `template`.',
	'skip-lexer:' => '(Optional) Skips the lexer & reflection engine. Assumes that the XML output is already available to generate docs from.'
);

$options = getopt('', array_keys($help));

if (sizeof($options) === 0)
{
	echo PHP_EOL;
	echo 'NDocs ' . NDocs::VERSION . PHP_EOL;
	echo "    A documentation generator for PHP5 classes and the NaturalDocs documentation format." . PHP_EOL;
	echo PHP_EOL;

	ksort($help);

	foreach ($help as $k => $v)
	{
		echo '--' . preg_replace('/(:*)/', '', $k) . PHP_EOL;
		echo '    ' . $v . PHP_EOL;
	}

	echo "\n\n";

	die();
}
// var_dump($options);
// die();

/********************************************************/
// DETERMINE CLASSES TO REFLECT

// Get the initial set of defined classes
$before = get_declared_classes();

if (!isset($options['match'])) die('The --match parameter is required.' . PHP_EOL);

// Glob and load
$files = Util::rglob($options['match']);
echo "FILE MATCHES" . PHP_EOL;
foreach ($files as $file)
{
	$file = getcwd() . '/' . $file;
	echo '    ' . $file . PHP_EOL;
	include_once $file;
}
echo PHP_EOL;

// Get the updated list of defined classes
$after = get_declared_classes();

// These are the new classes that were introduced
$diff = array_diff($after, $before);

// Do more filtering of the list
$parse_me = array();
echo "CLASS MATCHES" . PHP_EOL;
foreach ($diff as $class)
{
	// Exclude classes that contain the word "Exception"
	if (stripos($class, 'Exception') === false)
	{
		$parse_me[] = $class;
		echo '    ' . $class . PHP_EOL;
	}
}
sort($parse_me);
echo PHP_EOL;

/********************************************************/
// RUN THE LEXER

if (!isset($options['output']) || !$options['output'])
{
	$output = './output';
}
else
{
	$output = $options['output'];
}

// Remove the old output directory.
Util::rdelete($output);

echo "RUNNING THE LEXER" . PHP_EOL;
foreach ($parse_me as $class)
{
	Lexer::parse_class($class, $output);
}
echo PHP_EOL;

/********************************************************/
// READ AND APPLY THE TEMPLATE

$output = realpath($output);
include getcwd() . '/template/template_definition.php';

if (!isset($options['template']) || !$options['template'])
{
	$template = './template';
}
else
{
	$template = $options['template'];
}

echo "GENERATING THE README" . PHP_EOL;
$tmpl = new Template($class, $output, $template);
echo $tmpl->readme($parse_me);
echo PHP_EOL;

echo "RUNNING THE GENERATOR" . PHP_EOL;
foreach ($parse_me as $class)
{
	$tmpl = new Template($class, $output, $template);
	$tmpl->class_init();
	$tree[] = $tmpl->build_tree();

	foreach ($tmpl->write_to as $w)
	{
		echo '    ' . $w . PHP_EOL;
	}
}
echo PHP_EOL;

/********************************************************/
// COPY BACK

echo "COPYING STATIC FILES TO OUTPUT DIRECTORY" . PHP_EOL;
foreach (CopyFiles::get_files() as $file)
{
	$cmd = 'cp -Rf ' . realpath($template) . DIRECTORY_SEPARATOR . $file . ' ' . realpath($output) . DIRECTORY_SEPARATOR . 'html' . DIRECTORY_SEPARATOR;
	echo '    ' . $cmd . PHP_EOL;
	shell_exec($cmd);
}
echo PHP_EOL;

/********************************************************/
// COPY PANEL JS FILES

echo "COPYING PANEL SEARCH TREE" . PHP_EOL;

	// Add additional entries.
	$tree[] = array('README', 'README.html', '', array());

	$generator = new Generator(null, $output);
	$generator->start();
	echo 'var tree = ' . json_encode($tree);
	$generator->end($generator->output_dir . '/html/panel/tree.js');

	echo '    ' . $generator->output_dir . '/html/panel/tree.js' . PHP_EOL;
echo PHP_EOL;

/********************************************************/

$tend = time();
echo 'DONE. (' . ($tend - $tstart) . ' seconds)' . PHP_EOL;
echo PHP_EOL;
